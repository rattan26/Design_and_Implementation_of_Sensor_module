import mysql.connector
from mysql.connector import Error
import paho.mqtt.client as mqtt
import json
import threading
import queue

# Database configuration
try: 
    conn = mysql.connector.connect(
        host = "localhost",
        port = 3306,
        user = "root",
        password = "master2024",
        database = "Master"
    )
    if conn.is_connected():
        print("Connected to database")
        
except Error as e:
    print(f"Error connecting to database: {e}")

# MQTT configuration
mqtt_broker = "192.168.0.105"
mqtt_port = 1883
mqtt_topic = "home/+"

# Queue to handle incoming messages
message_queue = queue.Queue()

# Callback when the client receives a connection response from the broker
def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(mqtt_topic)

# Callback when a PUBLISH message is received from the broker
def on_message(client, userdata, msg):
    print(f"Message received on topic {msg.topic}: {msg.payload.decode()}")
    message_queue.put((msg.topic, msg.payload.decode()))

# Function to process messages from the queue and save them to the database
def process_messages():
    while True:
        topic, payload = message_queue.get()

        try:
            
            received_message = json.loads(payload)
            temperature = received_message.get("temp")
            humidity = received_message.get("hum")
            voc = received_message.get("voc")
            nox = received_message.get("nox")
            co2 = received_message.get("co2")
            sps30 = received_message.get("sps30")
            sound = received_message.get("sound")
            vibration = received_message.get("vib")

            # Connection to the database
            cursor = conn.cursor()
            query = """INSERT INTO sensors (Topic, Temperature, Humidity, VocIndex, NoxIndex, CO2,
                        SPS30, Sound, Vibration)
                       VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)"""
            cursor.execute(query, (topic, temperature, humidity, voc, nox, co2, sps30, sound, vibration))
            conn.commit()
            print("Data saved to database.")
            cursor.close()

        #This command will roll back the changes in database if connection breaks
        except Error as e:
            if conn:
                conn.rollback()
            print(f"Database error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")
            
        # Mark the task as done
        message_queue.task_done()

threading.Thread(target=process_messages, daemon=True).start()

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(mqtt_broker, mqtt_port, 60)

client.loop_forever()
